{"name":"jquery-widget","tagline":"A general Angular directive written to act as a wrapper to host any jQuery UI widget written to the specs of the Widget Factory.","body":"# jquery-widget\r\n\r\nHave you written a jQuery Widget but you don't have time to re-write it in angular?\r\n\r\nBut - *wow* - how much knowledge it takes to *properly* wire up your widget in angular?\r\n\r\nHow do I wrap it and use it angular? And it must be a two-way binding!\r\n\r\nWith this directive - it is all in the model.\r\n\r\nThis Angular directive was written as a wrapper to host **any** Widget written to the specs of the\r\n[Widget Factory](http://api.jqueryui.com/jquery.widget/)\r\n\r\n- slider [demo](http://jsfiddle.net/jmcpeak/scbu1w9f/)\r\n- spinner [demo](http://jsfiddle.net/jmcpeak/bqoyL56L/)\r\n\r\nThe [index.html](https://github.com/jmcpeak/jquery-widget/blob/master/app/index.html) file has many good working examples.\r\n\r\n## Features\r\n\r\n- Should work with any jQuery Widget written to the jQuery Widget [Factory Pattern](http://api.jqueryui.com/jquery.widget/)\r\n- Written as a single general purpose directive - jqueryWidget.js\r\n- Just need to write and pass in a config factory object - see [slider.js](https://github.com/jmcpeak/jquery-widget/blob/master/app/scripts/controllers/slider.js)\r\n\r\n## Settings in the config factory\r\n\r\nThe only thing required to use the directive is the config attribute.\r\nThis is a factory object with all the settings unique to this widget.\r\nYou will define the name of the widget, the events and any options you\r\nwant to use as attributes here:\r\n`<div jquery-widget config=\"sliderConfig\" ng-model=\"model.foo\"></div>`\r\n\r\n```javascript\r\nregister a slider module\r\nvar app = angular.module('slider', ['jqueryWidget']);\r\n\r\nregister a factory against that module\r\napp.factory('sliderConfig', function () {\r\n\r\n// the name of the widget - $('.selector').slider()\r\n// required\r\nthis.widget = 'slider';\r\n\r\n// the default widget option\r\n// optional\r\n// will map to the model based on this\r\nthis.default = 'value';\r\n\r\n// the list of html attributes you want to make available\r\n// optional \r\nthis.attributes = ['animate', 'disabled', 'max', 'min', 'orientation', 'range', 'step', 'value', 'values'];\r\n\r\n// Any options you want to set on initialization\r\n// optional\r\nthis.options = { min: 0, max: 10, step: 1 };\r\n\r\n// Where you wire up the jQuery events that are raised\r\n// optional\r\nthis.events = {\r\n    change: function (event, ui) {\r\n        $log.info('Event: change', event, ui);\r\n    },\r\n    slide: function (event, ui) {\r\n        $log.info('Event: slide', event, ui);\r\n    }\r\n};\r\n\r\n// An array of events that will get bound\r\n// optional\r\n// In this example, whenever the slide event is raised it will be bound to the model - here is where you specify\r\n// that on the slide event you want ui.value used as the model value \r\n// http://api.jqueryui.com/slider/#event-slide\r\nthis.binds = [\r\n    { slide: 'value' }\r\n];\r\n\r\n// the render callback\r\n// optional\r\n// if you need to change some values before they are put back into the widget - for instance the slider step\r\n// can't be less than 1 or empty - do that here\r\nthis.render = function(viewValue, ngModel) {};\r\n```\r\n\r\n## Options\r\nThe model needs to start life as an object - ng-model=\"model.foo\"\r\n\r\nThen all options will just be available on the model, by name, as two way bindings:\r\n```html\r\n<input type=\"text\" ng-model=\"model.foo.value\">\r\n```\r\n\r\n## Method\r\nA method can be used two ways - with and without a value.\r\n\r\nWithout a value, it is just a string:\r\n```html\r\n<button ng-click=\"model.foo.method='pageUp'\">pageUp</button>\r\n```\r\n\r\nWith a value, it is an object where the key is the name of the method and the value is the value:\r\n```html\r\n<button ng-click=\"model.foo.method={pageUp: 10}\">pageUp by 10</button>\r\n```\r\n\r\n## Events\r\nDefined once in the config object\r\n\r\n## Attributes\r\n\r\nDon't need any fancy options - just want to make them available as attributes?\r\n\r\nSet a list of them in the config object\r\n```javascript\r\nthis.attributes = ['disabled'];\r\n```\r\nAnd boom - they are just available as bound attributes:\r\n\r\nFirst define the directive\r\n```html\r\n<input jquery-widget config=\"sliderConfig\" disabled=\"{{sDisabled}}\" ng-model=\"model.foo\">\r\n```\r\n\r\nNow just use it\r\n```html\r\n<input type=\"checkbox\" value=\"{{sDisabled}}\" ng-click=\"sDisabled = !sDisabled\"/>\r\n```\r\n\r\n## Browser compatibility\r\n\r\nTBD\r\n\r\n## Installation using [Bower](http://bower.io/)\r\n\r\n- `bower install jquery-widget`\r\n\r\n## FAQ\r\n\r\nTBD\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}